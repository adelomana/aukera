sampleNames=factor(rownames(finalData))
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
sampleNames=factor(rownames(finalData))
autoplot(result,data=finalData) #
autoplot(result,colour=sampleNames) #
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
sampleNames=factor(rownames(finalData))
autoplot(result,colour=sampleNames) #
sampleNames
rep(3,'gre')
?rep
rep('green',3)
myColors=rep('green',3)+rep('red',3)
myColors=c(rep('green',3),rep('red',3))
myColors
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=myColors=c(rep('red',9),rep('blue',9))
autoplot(result,colour=myColors)
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
autoplot(result,colour=myColors)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
autoplot(result)
autoplot(result,colours=myColors)
autoplot(result,colour=myColors)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
figure=autoplot(result)
figure + scale_fill_manual(values=myColors)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
figure=autoplot(result)
figure + scale_color_manual(values=myColors)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
autoplot(result) + scale_colour_manual(values=myColors)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
autoplot(result) + scale_color_manual(values=myColors)
autoplot(result,scale_color_manual(values=myColors))
autoplot(result) + geom_point(colour = 'red', size = 3)
autoplot(result) + geom_point(colour = myColors, size = 3)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=c(rep('o',9),rep('*',9))
autoplot(result,legend=TRUE) + geom_point(colour = myColors, size = 3, shape=myMarkers)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=c(rep('a',9),rep('b',9))
autoplot(result,legend=TRUE) + geom_point(colour = myColors, size = 3, shape=myMarkers)
#figure + scale_color_manual(values=myColors)  scale_color_manual(values=myColors)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=c(rep('19',9),rep('17',9))
autoplot(result,legend=TRUE) + geom_point(colour = myColors, size = 3, shape=myMarkers)
#figure + scale_color_manual(values=myColors)  scale_color_manual(values=myColors)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=c(rep(19,9),rep(17,9))
autoplot(result,legend=TRUE) + geom_point(colour = myColors, size = 3, shape=myMarkers)
rownames(finalData)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(24,22,3),6)
autoplot(result,legend=TRUE) + geom_point(colour=myColors,size=3,shape=myMarkers)
#figure + scale_color_manual(values=myColors)  scale_color_manual(values=myColors)
#+ scale_fill_manual(values = c("#FF1BB3",
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(17,15,3),6)
autoplot(result,legend=TRUE) + geom_point(colour=myColors,size=3,shape=myMarkers)
#figure + scale_color_manual(values=myColors)  scale_color_manual(values=myColors)
#+ scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(17,15,3),6)
autoplot(result,legend=TRUE) + geom_point(colour=myColors,size=5,shape=myMarkers)
#figure + scale_color_manual(values=myColors)  scale_color_manual(values=myColor
autoplot(result,legend=TRUE) + geom_point(colour=myColors,size=5,shape=myMarkers,cex=5)
autoplot(result,legend=TRUE) + geom_point(colour=myColors,size=5,shape=myMarkers)
# this is a script that performs PCA on the proteomics samples
library(devtools)
library(ggfortify)
library(ggplot2)
setwd("~/30sols/expression/proteomics")
# 1. read the data
lysate.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br1.csv',sep=",",header=TRUE,row.names=1)
lysate.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br2.csv',sep=",",header=TRUE,row.names=1)
lysate.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br3.csv',sep=",",header=TRUE,row.names=1)
enriched.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br1.csv',sep=",",header=TRUE,row.names=1)
enriched.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br2.csv',sep=",",header=TRUE,row.names=1)
enriched.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br3.csv',sep=",",header=TRUE,row.names=1)
# 2. treating the data
# 2.1. finding the intersect of names
commonNames=Reduce(intersect,list(rownames(lysate.br1.full),rownames(lysate.br2.full),rownames(lysate.br3.full),rownames(enriched.br1.full),rownames(enriched.br2.full),rownames(enriched.br3.full)))
# 2.2. defining an appropriate data set for PCA
joinedData=data.frame(geneNames=commonNames,
lysate.br1.time21=lysate.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br1.time31=lysate.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br1.time41=lysate.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br2.time21=lysate.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br2.time31=lysate.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br2.time41=lysate.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br3.time21=lysate.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br3.time31=lysate.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br3.time41=lysate.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
###
enriched.br1.time21=enriched.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br1.time31=enriched.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br1.time41=enriched.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br2.time21=enriched.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br2.time31=enriched.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br2.time41=enriched.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br3.time21=enriched.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br3.time31=enriched.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br3.time41=enriched.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
#
row.names=1)
finalData=t(joinedData)
# 2. perform pca
result=prcomp(finalData,scale=TRUE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(17,15,3),6)
autoplot(result,legend=TRUE) + geom_point(colour=myColors,size=5,shape=myMarkers)
# this is a script that performs PCA on the proteomics samples
library(devtools)
library(ggfortify)
library(ggplot2)
setwd("~/30sols/expression/proteomics")
# 1. read the data
lysate.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br1.csv',sep=",",header=TRUE,row.names=1)
lysate.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br2.csv',sep=",",header=TRUE,row.names=1)
lysate.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br3.csv',sep=",",header=TRUE,row.names=1)
enriched.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br1.csv',sep=",",header=TRUE,row.names=1)
enriched.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br2.csv',sep=",",header=TRUE,row.names=1)
enriched.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br3.csv',sep=",",header=TRUE,row.names=1)
# 2. treating the data
# 2.1. finding the intersect of names
commonNames=Reduce(intersect,list(rownames(lysate.br1.full),rownames(lysate.br2.full),rownames(lysate.br3.full),rownames(enriched.br1.full),rownames(enriched.br2.full),rownames(enriched.br3.full)))
# 2.2. defining an appropriate data set for PCA
joinedData=data.frame(geneNames=commonNames,
lysate.br1.time21=lysate.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br1.time31=lysate.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br1.time41=lysate.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br2.time21=lysate.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br2.time31=lysate.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br2.time41=lysate.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br3.time21=lysate.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br3.time31=lysate.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br3.time41=lysate.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
###
enriched.br1.time21=enriched.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br1.time31=enriched.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br1.time41=enriched.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br2.time21=enriched.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br2.time31=enriched.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br2.time41=enriched.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br3.time21=enriched.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br3.time31=enriched.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br3.time41=enriched.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
#
row.names=1)
finalData=t(joinedData)
# 2. perform pca
result=prcomp(finalData,scale=FALSE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(17,15,3),6)
autoplot(result,legend=TRUE) + geom_point(colour=myColors,size=5,shape=myMarkers)
# this is a script that performs PCA on the proteomics samples
library(devtools)
library(ggfortify)
library(ggplot2)
setwd("~/30sols/expression/proteomics")
# 1. read the data
lysate.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br1.csv',sep=",",header=TRUE,row.names=1)
lysate.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br2.csv',sep=",",header=TRUE,row.names=1)
lysate.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br3.csv',sep=",",header=TRUE,row.names=1)
enriched.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br1.csv',sep=",",header=TRUE,row.names=1)
enriched.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br2.csv',sep=",",header=TRUE,row.names=1)
enriched.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br3.csv',sep=",",header=TRUE,row.names=1)
# 2. treating the data
# 2.1. finding the intersect of names
commonNames=Reduce(intersect,list(rownames(lysate.br1.full),rownames(lysate.br2.full),rownames(lysate.br3.full),rownames(enriched.br1.full),rownames(enriched.br2.full),rownames(enriched.br3.full)))
# 2.2. defining an appropriate data set for PCA
joinedData=data.frame(geneNames=commonNames,
lysate.br1.time21=lysate.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br1.time31=lysate.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br1.time41=lysate.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br2.time21=lysate.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br2.time31=lysate.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br2.time41=lysate.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br3.time21=lysate.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br3.time31=lysate.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br3.time41=lysate.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
###
enriched.br1.time21=enriched.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br1.time31=enriched.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br1.time41=enriched.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br2.time21=enriched.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br2.time31=enriched.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br2.time41=enriched.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br3.time21=enriched.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br3.time31=enriched.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br3.time41=enriched.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
#
row.names=1)
finalData=t(joinedData)
# 2. perform pca
result=prcomp(finalData,scale=TRUE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(17,15,3),6)
autoplot(result,legend=TRUE) + geom_point(colour=myColors,size=5,shape=myMarkers)
# this is a script that performs PCA on the proteomics samples
library(devtools)
library(ggfortify)
library(ggplot2)
setwd("~/30sols/expression/proteomics")
# 1. read the data
lysate.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br1.csv',sep=",",header=TRUE,row.names=1)
lysate.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br2.csv',sep=",",header=TRUE,row.names=1)
lysate.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br3.csv',sep=",",header=TRUE,row.names=1)
enriched.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br1.csv',sep=",",header=TRUE,row.names=1)
enriched.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br2.csv',sep=",",header=TRUE,row.names=1)
enriched.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br3.csv',sep=",",header=TRUE,row.names=1)
# 2. treating the data
# 2.1. finding the intersect of names
commonNames=Reduce(intersect,list(rownames(lysate.br1.full),rownames(lysate.br2.full),rownames(lysate.br3.full),rownames(enriched.br1.full),rownames(enriched.br2.full),rownames(enriched.br3.full)))
# 2.2. defining an appropriate data set for PCA
joinedData=data.frame(geneNames=commonNames,
lysate.br1.time21=lysate.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br1.time31=lysate.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br1.time41=lysate.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br2.time21=lysate.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br2.time31=lysate.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br2.time41=lysate.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br3.time21=lysate.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br3.time31=lysate.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br3.time41=lysate.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
###
enriched.br1.time21=enriched.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br1.time31=enriched.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br1.time41=enriched.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br2.time21=enriched.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br2.time31=enriched.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br2.time41=enriched.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br3.time21=enriched.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br3.time31=enriched.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br3.time41=enriched.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
#
row.names=1)
finalData=t(joinedData)
# 2. perform pca
result=prcomp(finalData,scale=TRUE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(17,15,3),6)
autoplot(result,aes(x,y)) + geom_point(colour=myColors,size=5,shape=myMarkers)
# this is a script that performs PCA on the proteomics samples
library(devtools)
library(ggfortify)
library(ggplot2)
setwd("~/30sols/expression/proteomics")
# 1. read the data
lysate.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br1.csv',sep=",",header=TRUE,row.names=1)
lysate.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br2.csv',sep=",",header=TRUE,row.names=1)
lysate.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br3.csv',sep=",",header=TRUE,row.names=1)
enriched.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br1.csv',sep=",",header=TRUE,row.names=1)
enriched.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br2.csv',sep=",",header=TRUE,row.names=1)
enriched.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br3.csv',sep=",",header=TRUE,row.names=1)
# 2. treating the data
# 2.1. finding the intersect of names
commonNames=Reduce(intersect,list(rownames(lysate.br1.full),rownames(lysate.br2.full),rownames(lysate.br3.full),rownames(enriched.br1.full),rownames(enriched.br2.full),rownames(enriched.br3.full)))
# 2.2. defining an appropriate data set for PCA
joinedData=data.frame(geneNames=commonNames,
lysate.br1.time21=lysate.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br1.time31=lysate.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br1.time41=lysate.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br2.time21=lysate.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br2.time31=lysate.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br2.time41=lysate.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br3.time21=lysate.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br3.time31=lysate.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br3.time41=lysate.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
###
enriched.br1.time21=enriched.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br1.time31=enriched.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br1.time41=enriched.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br2.time21=enriched.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br2.time31=enriched.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br2.time41=enriched.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br3.time21=enriched.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br3.time31=enriched.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br3.time41=enriched.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
#
row.names=1)
finalData=t(joinedData)
# 2. perform pca
result=prcomp(finalData,scale=TRUE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(17,15,3),6)
autoplot(result) + geom_point(colour=myColors,size=5,shape=myMarkers)
# this is a script that performs PCA on the proteomics samples
library(devtools)
library(ggfortify)
library(ggplot2)
setwd("~/30sols/expression/proteomics")
# 1. read the data
lysate.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br1.csv',sep=",",header=TRUE,row.names=1)
lysate.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br2.csv',sep=",",header=TRUE,row.names=1)
lysate.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/lysate.br3.csv',sep=",",header=TRUE,row.names=1)
enriched.br1.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br1.csv',sep=",",header=TRUE,row.names=1)
enriched.br2.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br2.csv',sep=",",header=TRUE,row.names=1)
enriched.br3.full=read.table('/Volumes/omics4tb/alomana/projects/TLR/data/proteomics/all/rbf.br3.csv',sep=",",header=TRUE,row.names=1)
# 2. treating the data
# 2.1. finding the intersect of names
commonNames=Reduce(intersect,list(rownames(lysate.br1.full),rownames(lysate.br2.full),rownames(lysate.br3.full),rownames(enriched.br1.full),rownames(enriched.br2.full),rownames(enriched.br3.full)))
# 2.2. defining an appropriate data set for PCA
joinedData=data.frame(geneNames=commonNames,
lysate.br1.time21=lysate.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br1.time31=lysate.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br1.time41=lysate.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br2.time21=lysate.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br2.time31=lysate.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br2.time41=lysate.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
lysate.br3.time21=lysate.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
lysate.br3.time31=lysate.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
lysate.br3.time41=lysate.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
###
enriched.br1.time21=enriched.br1.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br1.time31=enriched.br1.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br1.time41=enriched.br1.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br2.time21=enriched.br2.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br2.time31=enriched.br2.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br2.time41=enriched.br2.full[commonNames,"e4.vs..e1_log2_sfc"],
#
enriched.br3.time21=enriched.br3.full[commonNames,"e2.vs..e1_log2_sfc"],
enriched.br3.time31=enriched.br3.full[commonNames,"e3.vs..e1_log2_sfc"],
enriched.br3.time41=enriched.br3.full[commonNames,"e4.vs..e1_log2_sfc"],
#
row.names=1)
finalData=t(joinedData)
# 2. perform pca
result=prcomp(finalData,scale=TRUE)
summary(result)
myColors=c(rep('red',9),rep('blue',9))
myMarkers=rep(c(17,15,3),6)
autoplot(result) + geom_point(colour=myColors,size=5,shape=myMarkers)
rownames(finalData)
ax=c(1,2,3,4,5)
ay=c(1,2,3,4,5)
plot(ax,ay)
library('smatr')
installed.packages('smatr3')
installed.packages('smatr')
library(smatr)
installed.packages('pepe')
installed.packages('smatr-package')
install.package('smatr-package')
install.packages('smatr3')
install.packages('smatr')
library('smatr')
ax=c(1,2,3,4,5)
sma(y~x)
sma(ay~ax)
ma(ay~ax)
?sma
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("devtools")
devtools::install_github("pachterlab/sleuth")
library("sleuth")
library("sleuth")
resultsDir='/Volumes/omics4tb/alomana/projects/TLR/data/kallisto1e2/'
resultsDir
samples=dir(file.path("..", resultsDir))
samples
samples=dir(file.path(resultsDir))
samples
kallistoResultDirs=fil.path(samples,'pepe')
kallistoResultDirs=file.path(samples,'pepe')
kallistoResultDirs
kallistoResultDirs=file.path(resultDir,samples)
samples=dir(file.path(resultsDir))
samples
dirs=file.path(resultsDir,samples)
dirs
dirs=file.path(resultsDir,samples)
dirs
samples
file.path(resultsDir)
dir(file.path(resultsDir))
file.path(resultsDir,samples)
###
### this script defines differentially expressed transcripts using Sleuth
###
library('sleuth')
library('stringr')
# 0. user defined variables
setwd("~/github/aukera/extra/expression/pipeline.kallisto")
resultsDir='/Volumes/omics4tb/alomana/projects/TLR/data/kallisto1e3'
sleuthResultsRBF='/Volumes/omics4tb/alomana/projects/TLR/data/sleuth1e3/sleuthResultsRBF.csv'
sleuthResultsRNA='/Volumes/omics4tb/alomana/projects/TLR/data/sleuth1e3/sleuthResultsRNA.csv'
metadataFileRBF='sleuth.metadata.rbf.csv'
metadataFileRNA='sleuth.metadata.rna.csv'
# 1. handle data reading
sampleIDs=dir(file.path(resultsDir))
kallistoDirs=file.path(resultsDir,sampleIDs)
# 1.1. working with RBF
sampleSubset=sampleIDs[str_detect(sampleIDs,"rbf")]
t1=sampleSubset[str_detect(sampleSubset,"tp.1")]
t4=sampleSubset[str_detect(sampleSubset,"tp.4")]
sampleIDsRBF=c(t1,t4)
dirsSubset=kallistoDirs[str_detect(kallistoDirs,"rbf")]
t1=dirsSubset[str_detect(dirsSubset,"tp.1")]
t4=dirsSubset[str_detect(dirsSubset,"tp.4")]
kallistoDirsRBF=c(t1,t4)
# 1.2. working with RNA
sampleSubset=sampleIDs[str_detect(sampleIDs,"trna")]
t1=sampleSubset[str_detect(sampleSubset,"tp.1")]
t4=sampleSubset[str_detect(sampleSubset,"tp.4")]
sampleIDsRNA=c(t1,t4)
dirsSubset=kallistoDirs[str_detect(kallistoDirs,"trna")]
t1=dirsSubset[str_detect(dirsSubset,"tp.1")]
t4=dirsSubset[str_detect(dirsSubset,"tp.4")]
kallistoDirsRNA=c(t1,t4)
# 2. handle metadata reading and path association
s2cRBF=read.table(metadataFileRBF,header=TRUE,stringsAsFactors=FALSE,sep=",")
s2cRBF=dplyr::mutate(s2cRBF,path=kallistoDirsRBF)
s2cRNA=read.table(metadataFileRNA,header=TRUE,stringsAsFactors=FALSE,sep=",")
s2cRNA=dplyr::mutate(s2cRNA,path=kallistoDirsRNA)
# 3. running Sleuth
# 3.1. running Sleuth for RBF
soRBF=sleuth_prep(s2cRBF,extra_bootstrap_summary=TRUE,num_cores=1)
soRBF=sleuth_fit(soRBF,~condition,'full')
soRBF=sleuth_fit(soRBF,~1,'reduced')
soRBF=sleuth_lrt(soRBF,'reduced','full')
sleuthTable=sleuth_results(soRBF,'reduced:full','lrt',show_all=FALSE)
sleuthSignificant=dplyr::filter(sleuthTable,qval<=0.05)
dim(sleuthSignificant)
#head(sleuthSignificant,20)
#plot_bootstrap(soRBF, "lcl|AE004437.1_gene_284", units = "est_counts", color_by = "condition")
write.table(sleuthSignificant,file=sleuthResultsRBF,sep=",")
# 3.2. running Sleuth for RNA
soRNA=sleuth_prep(s2cRNA,extra_bootstrap_summary=TRUE,num_cores=1)
soRNA=sleuth_fit(soRNA,~condition,'full')
soRNA=sleuth_fit(soRNA,~1,'reduced')
soRNA=sleuth_lrt(soRNA,'reduced','full')
sleuthTable=sleuth_results(soRNA,'reduced:full','lrt',show_all=FALSE)
sleuthSignificant=dplyr::filter(sleuthTable,qval<=0.05)
dim(sleuthSignificant)
#head(sleuthSignificant,20)
#plot_bootstrap(soRNA, "lcl|AE004437.1_gene_1082", units = "est_counts", color_by = "condition")
write.table(sleuthSignificant,file=sleuthResultsRNA,sep=",")
plot_bootstrap(soRBF, "lcl|AE004437.1_gene_284", units = "est_counts", color_by = "condition")
